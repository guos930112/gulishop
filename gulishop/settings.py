"""
Django settings for gulishop project.

Generated by 'django-admin startproject' using Django 1.11.6.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""
import logging
import logging.handlers
import os, sys
from config.db_config import MYSQL_HOST, MYSQL_PORT, MYSQL_PASSWD
from config.env_config import CUR_ENV, IS_DEBUG, LOG_DIR_GULISHOP_SERVER

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))  # 添加apps到项目里
sys.path.insert(0, os.path.join(BASE_DIR, 'extra_apps'))  # 添加extra_apps到项目里

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '5rki$ce%8!cdvh1d2#!@vtu+y$xi+ioq^l081@l0j9nlqtgmrs'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'users.apps.UsersConfig',
    'goods.apps.GoodsConfig',
    'trade.apps.TradeConfig',
    'operations.apps.OperationsConfig',
    'xadmin',
    'crispy_forms',
    'DjangoUeditor',
    'rest_framework',
    'django_filters',
    'corsheaders',
    'rest_framework.authtoken',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'gulishop.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',
            ],
        },
    },
]

WSGI_APPLICATION = 'gulishop.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'gulishop',
        'USER': 'root',
        'PASSWORD': MYSQL_PASSWD,
        'HOST': MYSQL_HOST,
        'PORT': MYSQL_PORT,

    }
}

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

AUTH_USER_MODEL = 'users.UserProfile'

# rest framework
REST_FRAMEWORK = {
    #   # paginator global
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    # 'PAGE_SIZE': 10  # 每页多少条数据
    # 'DEFAULT_AUTHENTICATION_CLASSES': [
    #     'rest_framework.authentication.BasicAuthentication',  # 浏览器最基本的
    #     'rest_framework.authentication.SessionAuthentication',  # browser api 测试工具用的
    #     # 'rest_framework.authentication.TokenAuthentication',  # 当用户点击登陆后 后端把token返回后 前端每次带token访问资源时，我们的认证操作都是这里配置起的作用 需要看一下源码
    #     'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
    # ]
}

# 解决跨越问题
CORS_ORIGIN_ALLOW_ALL = True

import datetime

JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=7),  # jwt 过期时间
}

# 手机验证 re
MOBILE_RE = '^((13[0-9])|(14[5,7])|(15[0-3,5-9])|(17[0,3,5-8])|(18[0-9])|166|198|199|(147))\\d{8}$'
SEND_INTERVAL_TIMES = 60
# 云片网 apikey
YUNPIAN_KEY = '94e3cafc4543943d7c4de9a2fd687a5f'

private_key = os.path.join(BASE_DIR, 'apps/trade/keys/private_2048.txt')
ali_key = os.path.join(BASE_DIR, 'apps/trade/keys/ali_pubkey_2048.txt')
app_id = '2016092500591705'


def log_config(log_dir='./log', filename='log_test.log', is_debug=False):
    logginglevel = logging.DEBUG if is_debug else logging.INFO

    log_dir = os.path.join(log_dir)
    if not os.path.exists(log_dir):
        os.makedirs(log_dir)

    log_filename = os.path.join(log_dir, filename)

    formatter = logging.Formatter('%(asctime)s - %(levelname)s: %(message)s')
    log_FileHandler = logging.handlers.TimedRotatingFileHandler(log_filename,
                                                                when='D',  # log file rollover every 24 hours
                                                                interval=1,
                                                                backupCount=30)

    log_FileHandler.setFormatter(formatter)
    log_FileHandler.setLevel(logginglevel)
    logger = logging.getLogger()
    logger.setLevel(logginglevel)
    logger.addHandler(log_FileHandler)


server_name = 'gulishop'
log_filename = server_name + '.log'
log_dir = os.path.join(LOG_DIR_GULISHOP_SERVER, server_name)
log_config(log_dir=log_dir, filename=log_filename, is_debug=IS_DEBUG)
logging.info(f'server start in CUR_ENV:{CUR_ENV}')
